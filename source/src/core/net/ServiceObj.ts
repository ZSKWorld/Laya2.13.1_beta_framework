/**The class is automatically generated by BatMain.bat , please do not modify */

type IFacade = IAccountCtrl & IBagCtrl & IBattleCtrl & IFriendCtrl & IShopCtrl;

export class ServiceObj implements IFacade {
    
	register(data: RegisterInput): void { throw new Error("Method not implemented."); }
	login(data: LoginInput): void { throw new Error("Method not implemented."); }
	signIn(data:SignInInput): void { throw new Error("Method not implemented."); }
	clearAccount(data: ClearAccountInput): void { throw new Error("Method not implemented."); }
	useItem(data: UseItemInput): void { throw new Error("Method not implemented."); }
	sellItem(data: SellItemInput): void { throw new Error("Method not implemented."); }
	changeCollect(data: ChangeCollectInput): void { throw new Error("Method not implemented."); }
	decomposeGem(data:DecomposeGemInput): void { throw new Error("Method not implemented."); }
	dressEquip(data: DressEquipInput): void { throw new Error("Method not implemented."); }
	takeOffEquip(data: TakeOffEquipInput): void { throw new Error("Method not implemented."); }
	sellEquip(data: SellEquipInput): void { throw new Error("Method not implemented."); }
	decomposeEquip(data: DecomposeEquipInput): void { throw new Error("Method not implemented."); }
	enterBattle(data: EnterBattleInput): void { throw new Error("Method not implemented."); }
	requestBattle(data: RequestBattleInput): void { throw new Error("Method not implemented."); }
	existBattle(data: ExistBattleInput): void { throw new Error("Method not implemented."); }
	addFriend(data: AddFriendInput): void { throw new Error("Method not implemented."); }
	friendMsg(data: FriendMsgInput): void { throw new Error("Method not implemented."); }
	buyGoods(data: BuyGoodsInput): void { throw new Error("Method not implemented."); }

    static get Objs() {
        const obj = {};
        const names = Object.getOwnPropertyNames(this.prototype);
        names.forEach(v => obj[ v ] = null);
        return obj;
    }
}
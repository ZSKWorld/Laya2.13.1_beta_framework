/**The file is automatically generated by proto_declare.js , please do not modify */

declare module game {

	/** 网络通知 */
	const enum Notify {
		// poker.auth request, count:2
		NotifyAnotherLogin = "NotifyAnotherLogin",
		NotifyAccountBanned = "NotifyAccountBanned",

		// poker.game request, count:25
		NotifyGameStart = "NotifyGameStart",
		NotifyGameEnd = "NotifyGameEnd",
		NotifyGameTerminated = "NotifyGameTerminated",
		NotifyFight = "NotifyFight",
		NotifyStageStart = "NotifyStageStart",
		NotifyStageEnd = "NotifyStageEnd",
		NotifyDealCard = "NotifyDealCard",
		NotifyWaitCallLord = "NotifyWaitCallLord",
		NotifyCallLord = "NotifyCallLord",
		NotifyWaitGrabLord = "NotifyWaitGrabLord",
		NotifyGrabLord = "NotifyGrabLord",
		NotifyConfirmLandlord = "NotifyConfirmLandlord",
		NotifyWaitOpenHand = "NotifyWaitOpenHand",
		NotifyOpenHand = "NotifyOpenHand",
		NotifyWaitDiscard = "NotifyWaitDiscard",
		NotifyDiscard = "NotifyDiscard",
		NotifyWaitNewStage = "NotifyWaitNewStage",
		NotifyDelegate = "NotifyDelegate",
		NotifyAFK = "NotifyAFK",
		NotifyConnect = "NotifyConnect",
		NotifyEmoji = "NotifyEmoji",
		NotifyGameAction = "NotifyGameAction",
		NotifyVote = "NotifyVote",
		NotifyVoteResult = "NotifyVoteResult",
		NotifyDiscardError = "NotifyDiscardError",

		// poker.lobby request, count:9
		NotifyAccountGameEnd = "NotifyAccountGameEnd",
		NotifyAccountUpdate = "NotifyAccountUpdate",
		NotifyFriendModify = "NotifyFriendModify",
		NotifyFriendState = "NotifyFriendState",
		NotifyFriendInfoUpdate = "NotifyFriendInfoUpdate",
		NotifyUpvote = "NotifyUpvote",
		NotifyChangePassword = "NotifyChangePassword",
		NotifyTestBroadcast = "NotifyTestBroadcast",
		NotifyKickoutOffline = "NotifyKickoutOffline",

		// poker.match request, count:4
		NotifyUnifiedMatchTimeout = "NotifyUnifiedMatchTimeout",
		NotifyMatchCanceled = "NotifyMatchCanceled",
		NotifyMatchReset = "NotifyMatchReset",
		NotifyMatchSuccess = "NotifyMatchSuccess",

		// poker.payment request, count:1
		NotifyPayResult = "NotifyPayResult",

		// poker.room request, count:4
		NotifyRoomInvite = "NotifyRoomInvite",
		NotifyRoomKicked = "NotifyRoomKicked",
		NotifyRoomUpdate = "NotifyRoomUpdate",
		NotifyRoomEmoji = "NotifyRoomEmoji",
	}

	/** 网络请求协议 */
	const enum Request {
		// client request, count:0

		// poker.auth request, count:9
		ResetPasswordEmail = "ResetPasswordEmail",
		ResetPassword = "ResetPassword",
		CheckUsername = "CheckUsername",
		CheckMail = "CheckMail",
		Oauth2Auth = "Oauth2Auth",
		OauthBindAccount = "OauthBindAccount",
		StartCancellation = "StartCancellation",
		CancelCancellation = "CancelCancellation",
		FetchAccountLevelInfo = "FetchAccountLevelInfo",

		// poker.event request, count:0

		// poker.game request, count:14
		FetchGameInfo = "FetchGameInfo",
		ConnectController = "ConnectController",
		ReadyToPlay = "ReadyToPlay",
		SyncGame = "SyncGame",
		FinishSync = "FinishSync",
		PlayerCallLord = "PlayerCallLord",
		PlayerGrabLord = "PlayerGrabLord",
		MasterOpenHand = "MasterOpenHand",
		PlayerDiscard = "PlayerDiscard",
		PlayNextStage = "PlayNextStage",
		Delegate = "Delegate",
		Emoji = "Emoji",
		AFK = "AFK",
		Vote = "Vote",

		// poker.lobby request, count:98
		CreateNickname = "CreateNickname",
		ModifyNickname = "ModifyNickname",
		ModifyAvatarId = "ModifyAvatarId",
		ModifyTitleId = "ModifyTitleId",
		ModifyFrameId = "ModifyFrameId",
		SaveSkinGroup = "SaveSkinGroup",
		ChangeUsedSkinGroup = "ChangeUsedSkinGroup",
		ChangeMainCharacter = "ChangeMainCharacter",
		MakeCraft = "MakeCraft",
		FetchItemIdMap = "FetchItemIdMap",
		DebugButton = "DebugButton",
		FetchAccountBrief = "FetchAccountBrief",
		AddFriendRequest = "AddFriendRequest",
		ApplyFriendRequest = "ApplyFriendRequest",
		RemoveFriend = "RemoveFriend",
		QueryGame = "QueryGame",
		AuthGame = "AuthGame",
		FetchMailList = "FetchMailList",
		FetchMailDetail = "FetchMailDetail",
		ReadMail = "ReadMail",
		RecvMailAttachment = "RecvMailAttachment",
		DeleteMail = "DeleteMail",
		FetchDailyTaskList = "FetchDailyTaskList",
		ReceiveDailyTaskReward = "ReceiveDailyTaskReward",
		ReceiveSosCoin = "ReceiveSosCoin",
		ReadAnnouncement = "ReadAnnouncement",
		FetchAnnouncementList = "FetchAnnouncementList",
		BuyFromShop = "BuyFromShop",
		ExchangeFromShop = "ExchangeFromShop",
		FetchLeaderboard = "FetchLeaderboard",
		FetchFriendState = "FetchFriendState",
		DeleteSkinGroup = "DeleteSkinGroup",
		ReceiveCharacterLevelRewards = "ReceiveCharacterLevelRewards",
		FetchGameDevShuffles = "FetchGameDevShuffles",
		FetchActiveChest = "FetchActiveChest",
		FetchChest = "FetchChest",
		OpenChest = "OpenChest",
		FetchGiftBoxRewards = "FetchGiftBoxRewards",
		OpenGiftBox = "OpenGiftBox",
		FetchMatchStat = "FetchMatchStat",
		ReceiveSuiteReward = "ReceiveSuiteReward",
		FetchSeasonInfo = "FetchSeasonInfo",
		ReceiveSeasonReward = "ReceiveSeasonReward",
		ConfirmSeason = "ConfirmSeason",
		FetchRecentGameRecordList = "FetchRecentGameRecordList",
		FetchFavoriteGameRecordList = "FetchFavoriteGameRecordList",
		FetchGameRecordDetail = "FetchGameRecordDetail",
		AddFavoriteGameRecord = "AddFavoriteGameRecord",
		RemoveFavoriteGameRecord = "RemoveFavoriteGameRecord",
		ShareGameRecord = "ShareGameRecord",
		FetchOBToken = "FetchOBToken",
		FetchGameLiveList = "FetchGameLiveList",
		Observe = "Observe",
		UserComplain = "UserComplain",
		FetchClientValue = "FetchClientValue",
		SetClientValue = "SetClientValue",
		DelClientValue = "DelClientValue",
		ReceiveAchievementReward = "ReceiveAchievementReward",
		ReceiveAchievementLevelReward = "ReceiveAchievementLevelReward",
		ReceiveGiftCodeReward = "ReceiveGiftCodeReward",
		PlayCharacterVoice = "PlayCharacterVoice",
		RecordFetchHeadImage = "RecordFetchHeadImage",
		RecordFetchBustImage = "RecordFetchBustImage",
		ModifyProfileBackground = "ModifyProfileBackground",
		ModifyAchievementPermission = "ModifyAchievementPermission",
		FetchAccountAllAchievement = "FetchAccountAllAchievement",
		Upvote = "Upvote",
		SaveDecoration = "SaveDecoration",
		UpdateSeason = "UpdateSeason",
		FetchServerTime = "FetchServerTime",
		ReceiveVipReward = "ReceiveVipReward",
		FetchAccountComment = "FetchAccountComment",
		ModifyCommentPermission = "ModifyCommentPermission",
		AddComment = "AddComment",
		DelComment = "DelComment",
		SaveQuickPhrase = "SaveQuickPhrase",
		DelQuickPhrase = "DelQuickPhrase",
		ReceiveMonthTicket = "ReceiveMonthTicket",
		ReceiveBattlePassReward = "ReceiveBattlePassReward",
		ReceiveBattlePassTaskReward = "ReceiveBattlePassTaskReward",
		ReceiveFreePackage = "ReceiveFreePackage",
		BindMailEmail = "BindMailEmail",
		BindMail = "BindMail",
		ReadGuide = "ReadGuide",
		ShieldEmoji = "ShieldEmoji",
		TryOn = "TryOn",
		FetchAccount = "FetchAccount",
		ActivityBianDangFetchCurrent = "ActivityBianDangFetchCurrent",
		ActivityBianDangSaveCurrent = "ActivityBianDangSaveCurrent",
		ActivityBianDangReceiveRewards = "ActivityBianDangReceiveRewards",
		ActivityBianDangOpenChest = "ActivityBianDangOpenChest",
		FetchActivityList = "FetchActivityList",
		FetchActivityTasks = "FetchActivityTasks",
		ReceiveActivityTaskReward = "ReceiveActivityTaskReward",
		ActivityQianDaoFetchCurrent = "ActivityQianDaoFetchCurrent",
		ActivityQianDaoReceiveRewards = "ActivityQianDaoReceiveRewards",
		ModifySeasonStatisticPermission = "ModifySeasonStatisticPermission",
		GetValidPaymentPlatform = "GetValidPaymentPlatform",

		// poker.match request, count:2
		StartUnifiedMatch = "StartUnifiedMatch",
		CancelUnifiedMatch = "CancelUnifiedMatch",

		// poker.payment request, count:13
		CreateSandboxOrder = "CreateSandboxOrder",
		ResolveSandboxOrder = "ResolveSandboxOrder",
		ResolveUnfilledOrder = "ResolveUnfilledOrder",
		CreateXsollaOrder = "CreateXsollaOrder",
		CreateMycardOrder = "CreateMycardOrder",
		QueryOrder = "QueryOrder",
		CreateAppleOrder = "CreateAppleOrder",
		CheckAppleOrder = "CheckAppleOrder",
		FetchSteamLocation = "FetchSteamLocation",
		CreateSteamOrder = "CreateSteamOrder",
		CheckSteamOrder = "CheckSteamOrder",
		CreateGoogleOrder = "CreateGoogleOrder",
		CheckGoogleOrder = "CheckGoogleOrder",

		// poker.room request, count:16
		CreateRoom = "CreateRoom",
		LeaveRoom = "LeaveRoom",
		JoinRoom = "JoinRoom",
		AddRoomRobot = "AddRoomRobot",
		UpdateRoomRule = "UpdateRoomRule",
		UpdateRoomSeat = "UpdateRoomSeat",
		MemberLoadEnd = "MemberLoadEnd",
		PlayerReady = "PlayerReady",
		OpenHand = "OpenHand",
		StartGame = "StartGame",
		SetRoomOwner = "SetRoomOwner",
		KickRoomMember = "KickRoomMember",
		ChangeRoomOwner = "ChangeRoomOwner",
		InviteFriendToRoom = "InviteFriendToRoom",
		RoomEmoji = "RoomEmoji",
		FetchRoomInfo = "FetchRoomInfo",

		// poker.share request, count:0

		// poker.trigger request, count:0

		// server request, count:0
	}

	//#region 以下是  common 协议结构，一共 2 个
	interface IResponse {
		error?:any;
	}

	interface ISkinItem {
		type:number;
		res_id:number;
	}
	//#endregion

	//#region 以下是  client 协议结构，一共 0 个
	//#endregion

	//#region 以下是  poker.auth 协议结构，一共 28 个
	interface IReqVerifyEmail {
		email:string;
	}

	interface IResVerifyEmail extends IResponse {
		token:string;
	}

	interface IReqResetPasswordEmail {
		email:string;
		validation:string;
	}

	interface IResResetPasswordEmail extends IResponse {
		token:string;
	}

	interface IReqResetPassword {
		token:string;
		password:string;
		code:string;
	}

	interface IReqAuthUsername {
		username:string;
		email:string;
		password:string;
		type:number;
	}

	interface IResAuthUsername extends IResponse {
		token:string;
	}

	interface IReqAuthToken {
		token:string;
	}

	interface IResAuthToken extends IResponse {	}

	interface IReqLogin {
		token:string;
		client_user_info:IClientUserInfo;
		login_type:number;
	}

	interface IAccountOauth {
		oauth_type:number;
	}

	interface IDebtOrder {
		goods_id:number;
		order_id:string;
		time:number;
	}

	interface IReqSignup {
		token:string;
		password:string;
		type:number;
		code:string;
		client_user_info:IClientUserInfo;
		username:string;
		oauth_type:number;
		oauth_code:string;
	}

	interface IReqLogout {	}

	interface IReqCheckUsername {
		username:string;
	}

	interface IResCheckUsername extends IResponse {
		available:boolean;
	}

	interface IReqCheckMail {
		email:string;
	}

	interface IResCheckMail extends IResponse {
		available:boolean;
	}

	interface INotifyAnotherLogin {
		target_ip:string;
	}

	interface INotifyAccountBanned {
		ban_time:number;
		reason:string;
	}

	interface IReqOauth2Auth {
		oauth_type:number;
		code:string;
	}

	interface IResOauth2Auth extends IResponse {
		token:string;
		has_account:boolean;
	}

	interface IReqOauthBindAccount {
		oauth_type:number;
		code:string;
		token:string;
	}

	interface IResStartCancellation extends IResponse {
		cancel_time:number;
	}

	interface IReqCancelCancellation {
		token:string;
	}

	interface IReqFetchAccountLevelInfo {
		token:string;
	}

	interface IResFetchAccountLevelInfo extends IResponse {
		account_id:number;
		nickname:string;
		levels:IAccountLevel[];
	}

	interface IResLogin extends IResponse {
		account_id:number;
		nickname:string;
		avatar_id:number;
		title_id:number;
		frame_id:number;
		avatar_png:string;
		username:string;
		binded_mail:string;
		mail_valid:boolean;
		need_bind_email:number;
		oauth:IAccountOauth[];
		freeze_state:number;
		freeze_end_time:number;
		debt_orders:IDebtOrder[];
		levels:IAccountLevel[];
		character:IAccountCharacter;
		bag:IAccountBag;
		friend:IAccountFriend;
		mail:IAccountMail;
		daily_task:IAccountDailyTask;
		misc:IAccountMisc;
		achievement:IAccountAchievement;
		setting:IAccountSetting;
		mall:IAccountMall;
		decoration:IAccountDecoration;
		battle_pass:IAccountBattlePass;
		free_packages:IAccountFreePackage[];
		season:IAccountSeason;
		last_modify_nickname_time:number;
		session_id:number;
	}
	//#endregion

	//#region 以下是  poker.event 协议结构，一共 25 个
	interface IGameRecord {
		version:number;
		uuid:string;
		create_time:number;
		finish_time:number;
		finish_scene:number;
		category:number;
		meta:IGameMeta;
		rule:IGameRule;
		players:IPlayerSnapshot[];
		events:Uint8Array[];
		season_id:number;
		setting:IPlayRuleSetting;
	}

	interface IEvent {
		id:number;
		time:number;
		buffer:Uint8Array;
	}

	interface IEventBeginGame {	}

	interface IEventEndGame {	}

	interface IEventBeginStage {
		stage:number;
		stage_start_players:IPlayerStageStartSnap[];
		multiple:IMultiple;
		effects:IGameEffect[];
	}

	interface IEventEndStage {
		result:IStageResult;
		effects:IGameEffect[];
	}

	interface IEventConnect {
		seat:number;
		connect:number;
		ready:number;
		game_state:number;
	}

	interface IEventDealCard {
		deal_cards:Uint8Array;
		river:Uint8Array;
		call_seat:number;
		deal_card_players:IPlayerStageStartSnap[];
		deal_setting:IDealSetting;
		tian_laizi:Uint8Array;
	}

	interface IEventWaitCall {
		seat:number;
	}

	interface IEventDoCall {
		seat:number;
		call:number;
		duration:number;
	}

	interface IEventWaitGrab {
		seat:number;
	}

	interface IEventDoGrab {
		seat:number;
		grab:number;
		duration:number;
		multiple:IMultiple;
		effects:IGameEffect[];
	}

	interface IEventConfirm {
		seat:number;
		river:Uint8Array;
		di_laizi:Uint8Array;
	}

	interface IEventWaitDiscard {
		seat:number;
		last_union:ICardUnion;
		thinking_time:number;
	}

	interface IEventDoDiscard {
		seat:number;
		discard:number;
		union:ICardUnion;
		multiple:IMultiple;
		remain:number;
		duration:number;
		effects:IGameEffect[];
		time_out:boolean;
	}

	interface IEventWaitOpenHand {
		seat:number;
	}

	interface IEventOpenHand {
		seat:number;
		hand:Uint8Array;
		multiple:IMultiple;
		effects:IGameEffect[];
	}

	interface IEventDelegate {
		seat:number;
		delegate:number;
	}

	interface IEventWaitStage {	}

	interface IEventEmoji {
		seat:number;
		type:number;
		emoji:number;
		phrase_id:number;
	}

	interface IEventAFK {
		seat:number;
		afk:number;
	}

	interface IEventFight {	}

	interface IEventVote {
		seat:number;
		initiate:boolean;
		agree:boolean;
	}

	interface IEventVoteResult {
		result:boolean;
	}

	interface IEventDiscardError {
		error_seq:number;
		error_message:string;
		union:ICardUnion;
	}
	//#endregion

	//#region 以下是  poker.game 协议结构，一共 41 个
	interface IResFetchGameInfo extends IResponse {
		setting:IPlayRuleSetting;
		meta:IGameMeta;
		accounts:IPlayerSnapshot[];
		game_state:number;
		uuid:string;
		create_time:number;
	}

	interface IResReadyToPlay extends IResponse {
		game_state:number;
	}

	interface IReqSyncGame {
		step:number;
	}

	interface IResSyncGame extends IResponse {
		is_end:boolean;
		game_restore:IGameRestore;
	}

	interface IReqCallLord {
		call:boolean;
		duration:number;
	}

	interface IReqGrabLord {
		grab:boolean;
		duration:number;
	}

	interface IReqMasterOpenHand {
		open:boolean;
		union:ICardUnion;
		duration:number;
	}

	interface IReqDiscard {
		discard:boolean;
		union:ICardUnion;
		duration:number;
		discard_event_id:number;
	}

	interface IReqPlayNextStage {
		open:boolean;
		duration:number;
	}

	interface IReqDelegate {
		delegate:boolean;
	}

	interface IReqEmoji {
		type:number;
		emoji:number;
		phrase_id:number;
	}

	interface IReqAFK {
		afk:boolean;
	}

	interface IPlayerStageStart {
		seat:number;
		open_hand:boolean;
	}

	interface IDealCardSeat {
		seat:number;
		count:number;
		cards:Uint8Array;
	}

	interface INotifyGameStart {
		uuid:string;
		time:number;
	}

	interface INotifyGameEnd {	}

	interface INotifyGameTerminated {	}

	interface INotifyFight {	}

	interface INotifyStageStart {
		current_stage:number;
		players:IPlayerStageStart[];
		multiple:IMultiple;
		effects:IGameEffect[];
	}

	interface INotifyStageEnd {
		winner:number;
		winner_camp:number;
		is_spring:boolean;
		stage_end_players:IPlayerStageEndSnap[];
		multiple:IMultiple;
		effects:IGameEffect[];
	}

	interface INotifyDealCard {
		seats:IDealCardSeat[];
		call_seat:number;
		tian_laizi_point:number;
	}

	interface INotifyWaitCallLord {
		seat:number;
		timeout:number;
	}

	interface INotifyCallLord {
		seat:number;
		call:boolean;
	}

	interface INotifyWaitGrabLord {
		seat:number;
		timeout:number;
	}

	interface INotifyGrabLord {
		seat:number;
		grab:boolean;
		multiple:IMultiple;
		effects:IGameEffect[];
	}

	interface INotifyConfirmLandlord {
		seat:number;
		river:Uint8Array;
		di_laizi_point:number;
	}

	interface INotifyWaitOpenHand {
		seat:number;
		timeout:number;
	}

	interface INotifyOpenHand {
		seat:number;
		open:boolean;
		cards:Uint8Array;
		multiple:IMultiple;
		effects:IGameEffect[];
	}

	interface INotifyWaitDiscard {
		seat:number;
		timeout:number;
		last_union:ICardUnion;
	}

	interface INotifyDiscard {
		seat:number;
		discard:boolean;
		union:ICardUnion;
		multiple:IMultiple;
		remain_count:number;
		effects:IGameEffect[];
	}

	interface INotifyWaitNewStage {	}

	interface INotifyDelegate {
		seat:number;
		delegate:boolean;
	}

	interface INotifyAFK {
		seat:number;
		afk:boolean;
	}

	interface INotifyConnect {
		seat:number;
		connect:boolean;
		ready:number;
		game_state:number;
	}

	interface INotifyEmoji {
		seat:number;
		type:number;
		emoji:number;
		phrase_id:number;
	}

	interface IGameRestore {
		actions:Uint8Array[];
	}

	interface INotifyGameAction {
		seq:number;
		time:number;
		name:string;
		data:Uint8Array;
		bucket:number;
		uuid:string;
	}

	interface IReqVote {
		initiate:boolean;
		agree:boolean;
	}

	interface INotifyVote {
		seat:number;
		initiate:boolean;
		agree:boolean;
	}

	interface INotifyVoteResult {
		result:boolean;
	}

	interface INotifyDiscardError {
		error_seq:number;
		error_message:string;
	}
	//#endregion

	//#region 以下是  poker.lobby 协议结构，一共 188 个
	interface IReqReceiveAchievementReward {
		achievement_id:number;
	}

	interface IResReceiveAchievementReward extends IResponse {
		rewards:IItem[];
	}

	interface IReqReceiveAchievementLevelReward {
		level:number;
		all:number;
	}

	interface IResReceiveAchievementLevelReward extends IResponse {
		rewards:IItem[];
	}

	interface IAccountLevelCompute {
		id:number;
		score:number;
	}

	interface IAccountLevelChange {
		type:number;
		origin:IAccountLevelCompute;
		final:IAccountLevelCompute;
		reason:number;
	}

	interface IAccountLevelModify {
		season_id:number;
		game_score_modify:number;
		extra_score_modify:number;
		origin:IAccountLevel;
		final:IAccountLevel;
		changes:IAccountLevelChange[];
	}

	interface INotifyAccountGameEnd {
		level_modify:IAccountLevelModify;
		character_exp_modify:number;
		character_final_exp:number;
		chest_progress:IGameChestProgressUpdate;
		origin_gold:number;
		modify_gold:number;
		tips_gold:number;
		uuid:string;
		game_create_time:number;
		game_end_time:number;
		settlement_end_time:number;
	}

	interface IReqMakeCraft {
		id:number;
	}

	interface IIdData {
		number_id:number;
		string_id:string;
	}

	interface IReqChangeMainCharacter {
		character_id:number;
	}

	interface IResChangeMainCharacter extends IResponse {
		head_image_state:number;
		avatar_png:string;
		bust_image_state:number;
		bust_png:string;
	}

	interface IReqChangeUsedSkinGroup {
		character_id:number;
		group_id:number;
	}

	interface IResChangeUsedSkinGroup extends IResponse {
		head_image_state:number;
		avatar_png:string;
		bust_image_state:number;
		bust_png:string;
	}

	interface IReqCreateNickname {
		nickname:string;
	}

	interface IReqModifyNickname {
		nickname:string;
		use_item_id:string;
	}

	interface IReqModifyAvatarId {
		avatar_id:number;
	}

	interface IReqModifyTitleId {
		title_id:number;
	}

	interface IReqModifyFrameId {
		frame_id:number;
	}

	interface INotifyAccountUpdate {
		update:IAccountUpdate;
	}

	interface IAccountLevelUpdate {
		levels:IAccountLevel[];
	}

	interface IAccountResourceUpdate {
		id:number;
		final:number;
		update_time:number;
	}

	interface IAccountBasicUpdate {
		nickname:string;
		avatar_id:number;
		title_id:number;
		frame_id:number;
		avatar_png:string;
		likes:number;
		ban_state:number;
		binded_mail:string;
		mail_valid:boolean;
		bust_png:string;
	}

	interface IAccountFriendUpdate {
		friend:number[];
		apply_request:IAccountFriendRequest[];
	}

	interface IAccountMailUpdate {
		mails:IMail[];
	}

	interface IAccountDailyTaskUpdate {
		progresses:IBaseTaskProgress[];
	}

	interface IAccountAchievementUpdate {
		achievement_progresses:IAchievementProgress[];
		level_progresses:IAchievementLevelProgress[];
	}

	interface IAccountSettingUpdate {
		achievement_permission:number;
		comment_permission:number;
		brief_season_permission:number;
	}

	interface IAccountMiscUpdate {
		sos_coin:ISosCoinData[];
		shop_record:IShopRecord[];
		pickup_record:IPickupRecord[];
	}

	interface IAccountCharacterUpdate {
		character_id:number;
		exp:number;
		rewarded_levels:number[];
	}

	interface IAccountCharacterSkinUpdate {
		character_id:number;
		current_skin_group:number;
		skin_groups:ICharacterSkinGroup[];
	}

	interface IAccountMainCharacterUpdate {
		character_id:number;
	}

	interface IAccountRewardedSuiteUpdate {
		rewarded_suites:number[];
	}

	interface IAccountSeasonStatisticUpdate {
		season_statistics:IAccountSeasonStatistic[];
	}

	interface IAccountMallUpdate {
		accumulate_value:number;
		vip:number;
		received_vip_rewards:number[];
		currency:IGoodsRecord[];
		package:IGoodsRecord[];
		month_ticket:IGoodsRecord[];
	}

	interface IAccountQuickPhraseUpdate {
		character_id:number;
		quick_phrase:IQuickPhrase;
	}

	interface IAccountDecorationUpdate {
		lobby_background:number;
		game_background:number;
		effects:IEffectGroup;
		card_faces:ICardFaceGroup;
	}

	interface IAccountBattlePassUpdate {
		battle_pass_id:number;
		paid_version:number;
		level:number;
		exp:number;
		week_exp:number;
		rewards:IAccountBattlePassRewards;
		tasks:IAccountBattlePassTask[];
	}

	interface IAccountUpdate {
		basic:IAccountBasicUpdate;
		level:IAccountLevelUpdate;
		resource_updates:IAccountResourceUpdate[];
		friend:IAccountFriendUpdate;
		mail:IAccountMailUpdate;
		daily_task:IAccountDailyTaskUpdate;
		misc:IAccountMiscUpdate;
		character:IAccountCharacterUpdate[];
		character_skin:IAccountCharacterSkinUpdate[];
		main_character:IAccountMainCharacterUpdate;
		rewarded_suite:IAccountRewardedSuiteUpdate;
		achievement:IAccountAchievementUpdate;
		setting:IAccountSettingUpdate;
		season_statistic:IAccountSeasonStatisticUpdate;
		mall:IAccountMallUpdate;
		quick_phrase:IAccountQuickPhraseUpdate[];
		decoration:IAccountDecorationUpdate;
		battle_pass:IAccountBattlePassUpdate;
		free_packages:IAccountFreePackage[];
		activity_tasks:IActivityTask[];
		season_rewards:IAccountSeasonRewards[];
	}

	interface IReqFetchAccountBrief {
		accounts:number[];
		level:number;
	}

	interface IResFetchAccountBrief extends IResponse {
		briefs:IBytesBrief[];
	}

	interface IBytesBrief {
		basic_brief:Uint8Array;
		season_summaries:Uint8Array;
	}

	interface IReqAddFriendRequest {
		account_id:number;
	}

	interface IReqApplyFriendRequest {
		account_id_list:number[];
		result:number;
		type:number;
	}

	interface IResApplyFriendRequest extends IResponse {
		success_list:number[];
		state:number;
	}

	interface IReqRemoveFriend {
		account_id:number;
	}

	interface INotifyFriendModify {
		new_friend:number;
		removed_friend:number;
	}

	interface IResQueryGame extends IResponse {
		in_gaming:boolean;
	}

	interface IResAuthGame extends IResponse {	}

	interface IResFetchMailList extends IResponse {
		mails:IAccountMail;
	}

	interface IReqFetchMailDetail {
		mail_id_list:number[];
	}

	interface IResFetchMailDetail extends IResponse {
		detail:IMailDetail[];
	}

	interface IReqReadMail {
		mail_id:number;
	}

	interface IReqRecvMailAttachment {
		mail_list:number[];
	}

	interface IResRecvMailAttachment extends IResponse {
		items:IItem[];
	}

	interface IReqDeleteMail {
		mail_list:number[];
	}

	interface IResFetchDailyTaskList extends IResponse {
		progresses:IAccountDailyTask;
	}

	interface IReqReceiveDailyTaskReward {
		task_id:number;
		all:number;
	}

	interface IResReceiveDailyTaskReward extends IResponse {
		rewards:IItem[];
	}

	interface IReqReceiveSosCoin {
		id:number;
	}

	interface IResReceiveSosCoin extends IResponse {
		rewards:IItem[];
	}

	interface IReqReadAnnouncement {
		id:number;
	}

	interface IResFetchAnnouncementList extends IResponse {
		ann:IAnnouncement[];
	}

	interface IReqBuyFromShop {
		id:number;
		count:number;
	}

	interface IResBuyFromShop extends IResponse {
		items:IItem[];
		skin_groups:ISkinGroup[];
	}

	interface IReqExchangeFromShop {
		rule_id:number;
		items:IItem[];
	}

	interface IResExchangeFromShop extends IResponse {
		items:IItem[];
	}

	interface IReqFetchLeaderboard {
		offset:number;
		category:number;
	}

	interface IResFetchLeaderboard extends IResponse {
		account_list:number[];
		self_rank:number;
	}

	interface INotifyFriendState {
		friend:IAccountOnlineState;
	}

	interface INotifyFriendInfoUpdate {
		account_id:number;
	}

	interface IReqFetchFriendState {
		accounts:number[];
	}

	interface IResFetchFriendState extends IResponse {
		friends:IAccountOnlineState[];
	}

	interface IReqDeleteSkinGroup {
		group_id:number;
		character_id:number;
	}

	interface IResDeleteSkinGroup extends IResponse {
		current_use_group_id:number;
	}

	interface IReqReceiveCharacterLevelRewards {
		level_list:number[];
		character_id:number;
	}

	interface IResReceiveCharacterLevelRewards extends IResponse {
		rewards:IItem[];
	}

	interface IResFetchGameDevShuffles extends IResponse {
		shuffles:IGameDevShuffle[];
	}

	interface IReqFetchActiveChest {
		version:number;
	}

	interface IChestData {
		chest_id:number;
		end_time:number;
	}

	interface IReqFetchChest {
		chest_id:number;
	}

	interface IResFetchChest extends IResponse {
		use_new:boolean;
		pickup_items:number[];
		next_double:number;
	}

	interface IReqOpenChest {
		chest_id:number;
		count:number;
		ticket_id:number;
		ticket_count:number;
		pickup_items_hash:string;
	}

	interface ISkinGroup {
		skins:IItem[];
	}

	interface IResOpenChest extends IResponse {
		rewards:IItem[];
		skin_groups:ISkinGroup[];
		shop_currency_id:number;
		shop_currency_num:number;
	}

	interface IReqFetchGiftBoxRewards {
		res_id:number;
	}

	interface IResFetchGiftBoxRewards extends IResponse {
		rewards:IItem[];
	}

	interface IReqOpenGiftBox {
		res_id:number;
		count:number;
	}

	interface IResOpenGiftBox extends IResponse {
		rewards:IItem[];
	}

	interface IAccountSeasonResult {
		season_id:number;
		start_time:number;
		end_time:number;
		level_id:number;
		season_type:number;
		season_state:number;
		confirm_state:number;
		receive_state:number;
		template_id:number;
	}

	interface IReqFetchSeasonInfo {	}

	interface IResFetchSeasonInfo extends IResponse {
		seasons:IAccountSeasonResult[];
	}

	interface IReqReceiveSeasonReward {
		season_id:number;
		reward_id:number;
	}

	interface IResReceiveSeasonReward extends IResponse {
		rewards:IItem[];
	}

	interface IReqConfirmSeason {
		season_id:number;
	}

	interface IResConfirmSeason extends IResponse {	}

	interface IReqFetchMatchStat {
		match_id_list:number[];
	}

	interface IMatchData {
		match_id:number;
		count:number;
	}

	interface IAccountGameRecord {
		uuid:string;
		number:number;
		camp:number;
		win:boolean;
		start_time:number;
		end_time:number;
		open_hand:boolean;
		play_mode:number;
		match_id:number;
		category:number;
		Multiple:number;
		currency:number;
	}

	interface IReqRecentGameRecordList {	}

	interface IResRecentGameRecordList extends IResponse {
		records:IAccountGameRecord[];
	}

	interface IReqFavoriteGameRecordList {	}

	interface IResFavoriteGameRecordList extends IResponse {
		records:IAccountGameRecord[];
	}

	interface IReqGameRecordDetail {
		uuid:string;
		number:number;
		account_id:number;
	}

	interface IResGameRecordDetail extends IResponse {
		data:Uint8Array;
	}

	interface IReqAddFavoriteGameRecord {
		uuid:string;
		number:number;
	}

	interface IReqDeleteFavoriteGameRecord {
		uuid:string;
		number:number;
	}

	interface IReqShareGameRecord {
		uuid:string;
		number:number;
	}

	interface IReqFetchOBToken {
		uuid:string;
	}

	interface IResFetchOBToken extends IResponse {
		token:string;
		create_time:number;
		delay:number;
		start_time:number;
	}

	interface IReqFetchGameLiveList {
		filter_id:number;
	}

	interface IReqObserve {
		uuid:string;
	}

	interface IGameConfig {
		category:number;
		meta:IGameMeta;
		rule:IGameRule;
	}

	interface IResFetchGameLiveList extends IResponse {
		game_list:IGameLiveHead[];
	}

	interface IReqUserComplain {
		target_id:number;
		type:number;
	}

	interface IReqFetchClientValue {
		key:string;
	}

	interface IClientValue {
		key:string;
		value:string;
	}

	interface IReqSetClientValue {
		key:string;
		value:string;
	}

	interface IReqDelClientValue {
		keys:string[];
	}

	interface IReqReceiveSuiteReward {
		suite_id:number;
	}

	interface IResReceiveSuiteReward extends IResponse {
		rewards:IItem[];
	}

	interface IReqReceiveGiftCodeReward {
		code:string;
	}

	interface IResReceiveGiftCodeReward extends IResponse {
		rewards:IItem[];
	}

	interface IReqPlayCharacterVoice {
		character_id:number;
		voice_id:number;
	}

	interface IResSaveSkinGroup extends IResponse {
		head_image_state:number;
		avatar_png:string;
		bust_image_state:number;
		bust_png:string;
	}

	interface IReqRecordFetchHeadImage {
		target_id:number;
		target_png:string;
	}

	interface IResRecordFetchHeadImage extends IResponse {
		newest_png:string;
	}

	interface IReqRecordFetchBustImage {
		target_id:number;
		target_png:string;
	}

	interface IResRecordFetchBustImage extends IResponse {
		newest_png:string;
	}

	interface IReqModifyAchievementPermission {
		achievement_permission:number;
	}

	interface IReqFetchAccountAllAchievement {
		account_id:number;
	}

	interface IResFetchAccountAllAchievement extends IResponse {
		account_achievement:IAccountAchievement;
	}

	interface IReqUpvote {
		target_id:number;
		uuid:string;
	}

	interface INotifyUpvote {
		target_id:number;
		uuid:string;
		source_id:number;
	}

	interface INotifyChangePassword {	}

	interface IReqUpdateSeason {	}

	interface IReqFetchServerTime {	}

	interface IResFetchServerTime extends IResponse {
		time:number;
	}

	interface IReqReceiveVipReward {
		vip:number;
	}

	interface IResReceiveVipReward extends IResponse {
		rewards:IItem[];
	}

	interface IReqFetchAccountComment {
		account_id:number;
	}

	interface IResFetchAccountComment extends IResponse {
		permission:number;
		comments:IComment[];
	}

	interface IReqAddComment {
		target_id:number;
		comment:IWordStock;
		emo_id:number;
	}

	interface IReqDelComment {
		auto_id:number[];
	}

	interface IReqModifyCommentPermission {
		permission:number;
	}

	interface IReqSaveQuickPhrase {
		chara_id:number;
		phrase_id:number;
		quick_phrase:IWordStock;
	}

	interface IReqDelQuickPhrase {
		chara_id:number;
		phrase_id:number;
	}

	interface IReqModifyProfileBackground {
		res_id:number;
	}

	interface IReqSaveDecoration {
		save_type:number;
		lobby_background:number;
		game_background:number;
		effects:IEffectGroup;
		card_faces:ICardFaceGroup;
	}

	interface IReqReceiveBattlePassReward {
		levels:number[];
	}

	interface IResReceiveBattlePassReward extends IResponse {
		rewards:IItem[];
	}

	interface IReqReceiveBattlePassTaskReward {
		task_id:number;
		all:number;
	}

	interface IResReceiveBattlePassTaskReward extends IResponse {
		rewards:IItem[];
	}

	interface IReqReceiveFreePackage {
		id:number;
	}

	interface IResReceiveFreePackage extends IResponse {
		rewards:IItem[];
	}

	interface INotifyTestBroadcast {
		Content:string;
	}

	interface IReqBindMailEmail {
		email:string;
	}

	interface IResBindMailEmail extends IResponse {
		token:string;
	}

	interface IReqBindMail {
		token:string;
		code:string;
		password:string;
	}

	interface INotifyKickoutOffline {
		reason:number;
		force:boolean;
	}

	interface IReqReadGuide {	}

	interface IReqFetchAccount {
		type:number[];
	}

	interface IResFetchAccount extends IResponse {
		bag:IAccountBag;
		mall:IAccountMall;
	}

	interface IActivityBianDangFood {
		id:number;
		location_x:number;
		location_y:number;
	}

	interface IResActivityBianDangFetchCurrent extends IResponse {
		table_id:number;
		foods:IActivityBianDangFood[];
		received:number[];
	}

	interface IResActivityBianDangReceiveRewards extends IResponse {
		rewards:IItem[];
	}

	interface IReqActivityBianDangSaveCurrent {
		table_id:number;
		foods:IActivityBianDangFood[];
	}

	interface IResActivityBianDangOpenChest extends IResponse {
		rewards:IItem[];
	}

	interface IActivityTask {
		id:number;
		activity_id:number;
		progress:number;
		achieved:number;
		rewarded:number;
	}

	interface IResFetchActivityTasks extends IResponse {
		tasks:IActivityTask[];
	}

	interface IReqReceiveActivityTaskReward {
		id:number;
	}

	interface IResReceiveActivityTaskReward extends IResponse {
		rewards:IItem[];
	}

	interface IActivity {
		id:number;
		start_time:number;
		end_time:number;
	}

	interface IResFetchActivityList extends IResponse {
		activities:IActivity[];
	}

	interface IReqActivityBianDangReceiveRewards {
		table_id:number;
	}

	interface IReqActivityQianDaoFetchCurrent {
		activity_id:number;
	}

	interface IResActivityQianDaoFetchCurrent extends IResponse {
		day:number;
		last_receive_time:number;
	}

	interface IReqActivityQianDaoReceiveRewards {
		activity_id:number;
	}

	interface IResActivityQianDaoReceiveRewards extends IResponse {
		rewards:IItem[];
	}

	interface IReqModifySeasonStatisticPermission {
		permission:number;
	}

	interface IResGetValidPaymentPlatform extends IResponse {
		platforms:IPaymentPlatformConfig[];
	}

	interface IResFetchItemIdMap extends IResponse {
		id_map:IIdData[];
	}

	interface IReqSaveSkinGroup {
		character_id:number;
		group_id:number;
		items:ISkinItem[];
		name:string;
	}

	interface IResFetchActiveChest extends IResponse {
		chests:IChestData[];
	}

	interface IResFetchMatchStat extends IResponse {
		matches:IMatchData[];
	}

	interface IGameLiveHead {
		uuid:string;
		start_time:number;
		players:IPlayerSnapshot[];
		game_config:IGameConfig;
	}

	interface IResFetchClientValue extends IResponse {
		values:IClientValue[];
	}

	interface IReqTryOn {
		character_id:number;
		items:ISkinItem[];
	}
	//#endregion

	//#region 以下是  poker.match 协议结构，一共 6 个
	interface INotifyUnifiedMatchTimeout {
		sid:string;
	}

	interface INotifyMatchCanceled {
		sid:string;
	}

	interface INotifyMatchReset {
		sid:string;
	}

	interface INotifyMatchSuccess {
		sid:string;
	}

	interface IReqStartUnifiedMatch {
		sid:string;
		open_hands:number;
	}

	interface IReqCancelUnifiedMatch {
		sid:string;
	}
	//#endregion

	//#region 以下是  poker.payment 协议结构，一共 25 个
	interface IReqCreateSandboxOrder {
		goods_id:number;
		debt_order_id:string;
	}

	interface IResCreateSandboxOrder extends IResponse {
		order_id:string;
	}

	interface IReqResolveSandboxOrder {
		order_id:string;
		action:string;
	}

	interface IResResolveSandboxOrder extends IResponse {	}

	interface IBattlePassLevel {
		origin:number;
		final:number;
	}

	interface IReqResolveUnfilledOrder {
		action:string;
	}

	interface IResResolveUnfilledOrder extends IResponse {	}

	interface IReqCreateXsollaOrder {
		goods_id:number;
		debt_order_id:string;
	}

	interface IResCreateXsollaOrder extends IResponse {
		order_id:string;
		url:string;
	}

	interface IReqCreateMycardOrder {
		goods_id:number;
		debt_order_id:string;
	}

	interface IResCreateMycardOrder extends IResponse {
		order_id:string;
		url:string;
		auth_code:string;
	}

	interface IReqQueryOrder {
		order_id:string;
	}

	interface IResQueryOrder extends IResponse {
		pay_result:number;
		rewards:IItem[];
	}

	interface IReqCreateAppleOrder {
		goods_id:number;
		debt_order_id:string;
	}

	interface IResCreateAppleOrder extends IResponse {
		order_id:string;
	}

	interface IReqCheckAppleOrder {
		order_id:string;
		transaction_id:string;
		receipt_data:string;
	}

	interface IReqFetchSteamLocation {
		steam_id:number;
	}

	interface IResFetchSteamLocation extends IResponse {
		country:string;
	}

	interface IReqCreateSteamOrder {
		goods_id:number;
		language:string;
		steam_id:number;
		debt_order_id:string;
	}

	interface IResCreateSteamOrder extends IResponse {
		order_id:string;
	}

	interface IReqCheckSteamOrder {
		order_id:string;
	}

	interface IReqCreateGoogleOrder {
		goods_id:number;
		debt_order_id:string;
	}

	interface IResCreateGoogleOrder extends IResponse {
		order_id:string;
	}

	interface IReqCheckGoogleOrder {
		order_id:string;
		token:string;
	}

	interface INotifyPayResult {
		pay_status:number;
		order_id:string;
		goods_id:number;
		rewards:IItem[];
		accumulate_value:number;
		level:IBattlePassLevel;
		debt_order_id:string;
	}
	//#endregion

	//#region 以下是  poker.room 协议结构，一共 25 个
	interface IRoomMemberState {
		account_id:number;
		ready_state:number;
		open_hand:number;
	}

	interface INotifyRoomInvite {
		room_id:number;
		account_id:number;
		seat:number;
	}

	interface INotifyRoomKicked {	}

	interface INotifyRoomUpdate {
		members:IPlayerSnapshot[];
		setting:IPlayRuleSetting;
		owner_id:number;
		room_status:IRoomStatus;
		room_id:number;
		member_states:IRoomMemberState[];
	}

	interface IRoomStatus {
		loaded_num:number;
		ready_num:number;
	}

	interface IReqChangeRoomOwner {
		account_id:number;
	}

	interface IReqKickRoomMember {
		seat:number;
	}

	interface IReqSetRoomOwner {
		seat:number;
	}

	interface IReqPlayerReady {
		ready_state:number;
	}

	interface IReqOpenHand {
		open_hand:number;
	}

	interface IReqMemberLoadEnd {
		account_id:number;
	}

	interface IReqUpdateRoomRule {
		setting:IPlayRuleSetting;
	}

	interface IReqCreateRoom {
		setting:IPlayRuleSetting;
	}

	interface IResCreateRoom extends IResponse {
		room_id:number;
		owner:IPlayerSnapshot;
	}

	interface IReqJoinRoom {
		room_id:number;
		seat:number;
	}

	interface IResJoinRoom extends IResponse {
		members:IPlayerSnapshot[];
		setting:IPlayRuleSetting;
		owner_id:number;
		member_states:IRoomMemberState[];
		room_status:IRoomStatus;
		room_id:number;
	}

	interface IReqLeaveRoom {	}

	interface IResLeaveRoom extends IResponse {	}

	interface IReqAddRoomRobot {
		seat:number;
	}

	interface IResAddRoomRobot extends IResponse {	}

	interface IReqInviteFriendToRoom {
		account_id:number;
		seat:number;
	}

	interface INotifyRoomEmoji {
		account_id:number;
		type:number;
		emoji:number;
		phrase_id:number;
	}

	interface IReqRoomEmoji {
		type:number;
		emoji:number;
		phrase_id:number;
	}

	interface IReqFetchRoomInfo {	}

	interface IResFetchRoomInfo extends IResponse {
		room_id:number;
		members:IPlayerSnapshot[];
		setting:IPlayRuleSetting;
		owner_id:number;
		room_status:IRoomStatus;
		member_states:IRoomMemberState[];
	}
	//#endregion

	//#region 以下是  poker.share 协议结构，一共 79 个
	interface IClientUserInfo {
		device_id:string;
		runtime_id:string;
		device:string;
		os:string;
		ip:string;
		channel:string;
		client_version:string;
		code:string;
	}

	interface IAccountLevel {
		type:number;
		id:number;
		score:number;
		season_id:number;
		extra:number;
	}

	interface ISkinData {
		type:number;
		res_id:number;
	}

	interface ICharacterSkinGroup {
		group_id:number;
		skin_items:ISkinData[];
		name:string;
		create_time:number;
	}

	interface ICharacterData {
		character_id:number;
		current_skin_group:number;
		skin_groups:ICharacterSkinGroup[];
		exp:number;
		rewarded_level:number;
		rewarded_levels:number[];
		quick_phrase:IQuickPhrase[];
	}

	interface IAccountCharacter {
		current_character_id:number;
		character:ICharacterData[];
		rewarded_suites:number[];
	}

	interface IItemReplace {
		replace_count:number;
		res_id:number;
		res_count:number;
	}

	interface IItem {
		res_id:number;
		res_count:number;
		replace:IItemReplace[];
		update_time:number;
	}

	interface IAccountBag {
		items:IItem[];
	}

	interface IAccountFriend {
		friend:number[];
		apply_request:IAccountFriendRequest[];
	}

	interface IMail {
		read_time:number;
		recv_attachment_time:number;
		mail_id:number;
		expire_time:number;
		create_time:number;
	}

	interface IMailDetail {
		title:string;
		content:string;
		attachments:IItem[];
		mail_id:number;
	}

	interface IAccountMail {
		mails:IMail[];
	}

	interface IAccountDailyTask {
		progresses:IBaseTaskProgress[];
	}

	interface IAccountAchievement {
		achievement_progresses:IAchievementProgress[];
		level_progresses:IAchievementLevelProgress[];
	}

	interface IAccountSetting {
		achievement_permission:number;
		comment_permission:number;
		brief_season_permission:number;
	}

	interface IEffectData {
		type:number;
		res_id:number;
	}

	interface ICardFaceData {
		type:number;
		res_id:number;
	}

	interface IEffectGroup {
		group_id:number;
		effects:IEffectData[];
	}

	interface ICardFaceGroup {
		group_id:number;
		card_faces:ICardFaceData[];
		open_cutin:boolean;
	}

	interface IAccountDecoration {
		lobby_background:number;
		game_background:number;
		effect_main_group:number;
		effects:IEffectGroup[];
		card_face_main_group:number;
		card_faces:ICardFaceGroup[];
	}

	interface ISosCoinData {
		id:number;
		count:number;
	}

	interface IShopRecord {
		shop_id:number;
		count:number;
	}

	interface IPickupRecord {
		pickup_id:number;
		pickup_count:number;
	}

	interface IAccountMisc {
		sos_coin:ISosCoinData[];
		read_ann_id:number[];
		shop_record:IShopRecord[];
		pickup_record:IPickupRecord[];
	}

	interface ICardSnapshot {
		suit:number;
		points:number;
	}

	interface IReqEmpty {	}

	interface IResEmpty extends IResponse {	}

	interface IAccountBrief1 {
		account_id:number;
		nickname:string;
		avatar_id:number;
		title_id:number;
		levels:IAccountLevel[];
		frame_id:number;
		avatar_png:string;
		likes:number;
		bust_png:string;
	}

	interface ICharacterBrief {
		id:number;
		skins:ISkinData[];
		exp:number;
	}

	interface IAccountBrief2 {
		brief1:IAccountBrief1;
		character:ICharacterBrief;
	}

	interface IGameSummary {
		game_count:number;
		win_count:number;
		win_hand_count:number;
		recent_win:Uint8Array;
		highest_mul:number;
		highest_win:number;
		discard_duration:number;
		positive_bean_sum:number;
		positive_bean_count:number;
		open_count:number;
		landlord_open_count:number;
		total_discard_count:number;
		landlord_count:number;
		landlord_win_count:number;
		farmer_count:number;
		farmer_win_count:number;
		teammate_complete_count:number;
		multiple_sum:number;
		shapes:ICardShape[];
		spring_count:number;
	}

	interface ICardShape {
		type:number;
		count:number;
	}

	interface IGameStatistic {
		play_mode:number;
		summary:IGameSummary;
		recent_trend_list:IRecentTrend[];
	}

	interface ISeasonStatistic {
		season_id:number;
		season_type:number;
		highest_level_id:number;
		highest_level_score:number;
	}

	interface ICharacterGameCount {
		character_id:number;
		count:number;
	}

	interface ISeasonMatchSummary {
		match_id:number;
		game_count:number;
		win_count:number;
	}

	interface ISeasonSummaries {
		season_summaries:ISeasonSummary[];
	}

	interface ISeasonSummary {
		season_id:number;
		season_type:number;
		character_game_count:ICharacterGameCount[];
		beat_count:number;
		total_time:number;
		tongbi_count:number;
		score_count:number;
		extra_score_count:number;
		highest_tongbi:number;
		cap_count:number;
		character_exp_count:number;
		tips_count:number;
		login_day_count:number;
		daily_task_count:number;
		sos_count:number;
		chest_count:number;
		match_summary:ISeasonMatchSummary[];
	}

	interface IRecentTrend {
		lord:boolean;
		win:boolean;
		multiple:number;
		copper_top:boolean;
	}

	interface IGoodsRecord {
		goods_id:number;
		purchased_count:number;
		start_time:number;
		end_time:number;
		is_first_pay:boolean;
		wallet:number;
		last_receive_time:number;
		expire_time:number;
	}

	interface IAccountMall {
		accumulate_value:number;
		vip:number;
		received_vip_rewards:number[];
		currency:IGoodsRecord[];
		package:IGoodsRecord[];
		month_ticket:IGoodsRecord[];
	}

	interface IAccountBrief3 {
		brief2:IAccountBrief2;
		game_statistic:IGameStatistic[];
		season_statistic:ISeasonStatistic[];
		last_achieved_achievement_id:number;
		total_achieved_achievement_point:number;
		profile_background:number;
		season_permission:number;
	}

	interface IAccountFriendRequest {
		account_id:number;
		apply_time:number;
	}

	interface IOptionalUint32 {
		ok:boolean;
		value:number;
	}

	interface IOptionalString {
		ok:boolean;
		value:string;
	}

	interface IBaseTaskProgress {
		task_id:number;
		counter:number;
		achieved:number;
		rewarded:number;
	}

	interface IAchievementProgress {
		achievement_id:number;
		counter:number;
		achieved:number;
		achieved_time:number;
		rewarded:number;
	}

	interface IAchievementLevelProgress {
		level:number;
		rewarded_time:number;
	}

	interface IAnnouncement {
		id:number;
		content:string;
		title:string;
	}

	interface ILandlordPlaySetting {
		stage_count:number;
		can_multiple:number;
		can_open_hands:number;
		max_point:number;
		game_mode:number;
		dev:IDevPlaySetting;
	}

	interface IPlayRuleSetting {
		rule:number;
		landlord:ILandlordPlaySetting;
	}

	interface IPlayerSnapshot {
		account_id:number;
		nickname:string;
		levels:IAccountLevel[];
		open:number;
		character_id:number;
		skins:ISkinData[];
		seat:number;
		currency:number;
		title_id:number;
		emoji:number[];
		effects:IEffectData[];
		quick_phrase:IQuickPhrase[];
		card_faces:ICardFaceData[];
		open_cutin:boolean;
	}

	interface IPlayMeta {
		room_id:number;
		match_id:number;
	}

	interface IGameMeta {
		room_id:number;
		match_id:number;
	}

	interface IAccountPlayingGame {
		uuid:string;
		category:number;
		meta:IGameMeta;
	}

	interface IAccountRoomInfo {
		room_id:number;
	}

	interface IAccountOnlineState {
		account_id:number;
		online:boolean;
		last_login_time:number;
		last_logout_time:number;
		playing:IAccountPlayingGame;
		room:IAccountRoomInfo;
	}

	interface IGameDevShuffle {
		shuffle_id:number;
		create_time:number;
		cards:string;
		title:string;
		description:string;
	}

	interface IDevPlaySetting {
		open_hand:number;
		open_river:number;
		shuffler_id:number;
		cheat_mode:number;
	}

	interface IDealSetting {
		open_hand:number;
		open_river:number;
		shuffler_id:number;
	}

	interface IGameChestProgressUpdate {
		chest_id:number;
		origin:number;
		final:number;
		is_graded:boolean;
		rewards:IItem[];
	}

	interface IMultiple {
		initial:number;
		open_hand:number[];
		grab_lord:number[];
		boom:number[];
		spring:number;
	}

	interface ICardUnion {
		type:number;
		primary:Uint8Array;
		secondary:Uint8Array;
		entity_primary:Uint8Array;
		entity_secondary:Uint8Array;
	}

	interface IGameRule {
		stage:number;
		player_count:number;
		multiple:number;
		open_hand:number;
		base_point:number;
		max_score:number;
		fight:number;
		shuffle_mode:number;
		ai_level:number;
		dev:IDevPlaySetting;
		tips:number;
		init_multi:number;
		features:number[];
	}

	interface IPlayerStageStartSnap {
		seat:number;
		hand:Uint8Array;
		open:number;
		open_start:number;
		camp:number;
		delegate:number;
	}

	interface IPlayerStageEndSnap {
		seat:number;
		camp:number;
		base_point:number;
		multiple:number;
		stage_score:number;
		fixed_score:number;
		total_score:number;
		hand:Uint8Array;
		is_open:number;
		win:number;
		stage_currency:number;
		fixed_currency:number;
		win_stage:number;
		game_rule_fix_flag:number;
		player_debt_fix_flag:number;
		extra_score:number;
	}

	interface IStageResult {
		winner:number;
		winner_camp:number;
		is_spring:number;
		stage_end_players:IPlayerStageEndSnap[];
		multiple:IMultiple;
		stage:number;
	}

	interface IAccountSeasonStatistic {
		type:number;
		id:number;
		score:number;
		season_id:number;
	}

	interface IWordStock {
		sentence_id:number;
		words_id:number[];
	}

	interface IComment {
		auto_id:number;
		account_id:number;
		commentor:number;
		comment:IWordStock;
		emo_id:number;
		comment_time:number;
	}

	interface IQuickPhrase {
		phrase_id:number;
		quick_phrase:IWordStock;
	}

	interface IAccountBattlePassRewards {
		free_rewards:number[];
		rewards:number[];
	}

	interface IAccountBattlePassTask {
		task_id:number;
		progress:number;
		achieved:boolean;
		rewarded:boolean;
	}

	interface IAccountBattlePass {
		battle_pass_id:number;
		paid_version:number;
		level:number;
		exp:number;
		week_exp:number;
		rewards:IAccountBattlePassRewards;
		tasks:IAccountBattlePassTask[];
		settle_time:number;
	}

	interface IAccountFreePackage {
		id:number;
		receive_count:number;
		last_receive_time:number;
	}

	interface IAccountSeasonRewards {
		season_id:number;
		received_rewards:number[];
	}

	interface IAccountSeason {
		season_rewards:IAccountSeasonRewards[];
	}

	interface IPaymentPlatformConfig {
		platform_id:number;
		open_payment:number;
		open_clear:number;
	}
	//#endregion

	//#region 以下是  poker.trigger 协议结构，一共 2 个
	interface IGameEffect {
		id:number;
		buffer:Uint8Array;
	}

	interface IEffectExtraScoreChange {
		origin:number;
		final:number;
		reason:number;
	}
	//#endregion

	//#region 以下是  server 协议结构，一共 0 个
	//#endregion

}
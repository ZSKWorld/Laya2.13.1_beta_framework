syntax = "proto3";

package pk;

import "poker.share.proto";

option go_package = ".;protocol";

service Auth {
  rpc VerifyEmail (ReqVerifyEmail) returns (ResVerifyEmail);
  rpc Signup (ReqSignup) returns (ResEmpty);
  rpc ResetPasswordEmail(ReqResetPasswordEmail) returns (ResResetPasswordEmail);
  rpc ResetPassword(ReqResetPassword) returns(ResEmpty);
  rpc AuthUsername (ReqAuthUsername) returns (ResAuthUsername);
  rpc AuthToken (ReqAuthToken) returns (ResAuthToken);
  rpc Login (ReqLogin) returns (ResLogin);
  rpc CheckUsername(ReqCheckUsername) returns (ResCheckUsername);
  rpc CheckMail(ReqCheckMail) returns (ResCheckMail);
  rpc Oauth2Auth(ReqOauth2Auth) returns (ResOauth2Auth);
  rpc OauthBindAccount(ReqOauthBindAccount) returns (ResEmpty);
  rpc StartCancellation(ReqEmpty) returns (ResStartCancellation);
  rpc CancelCancellation(ReqCancelCancellation) returns (ResEmpty);
  rpc FetchAccountLevelInfo(ReqFetchAccountLevelInfo) returns (ResFetchAccountLevelInfo);
}

message ReqVerifyEmail {
  string email = 1;
}

message ResVerifyEmail {
  string token = 1;
}

message ReqResetPasswordEmail {
  string email = 1;
  string validation = 2;
}

message ResResetPasswordEmail {
  string token = 1;
}

message ReqResetPassword {
  string token = 1;
  string password = 2;
  string code = 3;
}

// 以用户名密码验证
message ReqAuthUsername {
  string username = 1;
  string email = 2;
  string password = 3;
  uint32 type = 4; // 1-用户名登陆 2-邮箱登陆
}
message ResAuthUsername {
  string token = 1;
}

// 以token方式验证
message ReqAuthToken {
  string token = 1;
}
message ResAuthToken {
}

message ReqLogin {
  string token = 1;
  ClientUserInfo client_user_info = 2;
  uint32 login_type = 3; // 1-登陆界面登陆 2-重连
}

message AccountOauth {
  uint32 oauth_type = 1;
}

message ResLogin {
  uint32 account_id = 1;
  string nickname = 2;
  uint32 avatar_id = 3; // 头像ID
  uint32 title_id = 4; // 称号ID
  uint32 frame_id = 5; // 头像框ID
  string avatar_png = 6; // 头像图片地址
  string username = 7; // 账号名
  string binded_mail = 8;
  bool mail_valid = 9;
  uint32 need_bind_email = 10; // 0-不需要绑定 1-需要绑定 2-引导绑定 3-强制绑定（该字段不为0时，绑定邮箱需要携带password信息）
  repeated AccountOauth oauth = 11;
  uint32 freeze_state = 12;
  uint32 freeze_end_time = 13;

  message DebtOrder {
    uint32 goods_id = 1;
    string order_id = 2;
    uint32 time = 3;
  }
  repeated DebtOrder debt_orders = 14;

  // 复杂结构 从20开始
  // todo 后面要拆分一下，login回包做的太重可能不太好，不利于快速重连
  repeated AccountLevel levels = 20;
  AccountCharacter character = 21;
  AccountBag bag = 22;
  AccountFriend friend = 23;
  AccountMail mail = 24;
  AccountDailyTask daily_task = 25;
  AccountMisc misc = 26;
  AccountAchievement achievement = 27;
  AccountSetting setting = 28;
  AccountMall mall = 29; // 商店购买信息
  AccountDecoration decoration = 30;
  AccountBattlePass battle_pass = 31; // 战令信息
  repeated AccountFreePackage free_packages = 32;
  AccountSeason season = 33; // 赛季信息
  uint32 last_modify_nickname_time = 34;

  uint32 session_id = 100; // 临时方案，客户端记录日志使用
}

message ReqSignup {
  string token = 1;
//  string username = 1;
  string password = 2;
  uint32 type = 3; // 1-用户名注册 2-邮箱注册 3-第三方注册
  string code = 4;
  ClientUserInfo client_user_info = 5;
  string username = 6; // 用户名注册，则不检查token
  uint32 oauth_type = 7;
  string oauth_code = 8;
}

message ReqLogout {
}

message ReqCheckUsername {
  string username = 1;
}

message ResCheckUsername {
  bool available = 1;
}

message ReqCheckMail {
  string email = 1;
}

message ResCheckMail {
  bool available = 1;
}

// 提示有另一处登录
message NotifyAnotherLogin {
  string target_ip = 1;
}

// 提示账号被封禁
message NotifyAccountBanned {
  uint32 ban_time = 1;
  string reason = 2;
}

message ReqOauth2Auth {
  uint32 oauth_type = 1;
  string code = 2;
}

message ResOauth2Auth {
  string token = 1;
  bool has_account = 2;
}

message ReqOauthBindAccount {
  uint32 oauth_type = 1;
  string code = 2;
  string token = 3;
}

message ResStartCancellation {
  uint32 cancel_time = 1;
}

message ReqCancelCancellation {
  string token = 1;
}

message ReqFetchAccountLevelInfo{
  string token = 1;
}

message ResFetchAccountLevelInfo{
  uint32 account_id = 1;
  string nickname = 2;
  repeated AccountLevel levels = 3;
}